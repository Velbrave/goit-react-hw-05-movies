{"version":3,"file":"static/js/923.b0e18c6c.chunk.js","mappings":"iPAEMA,E,OAAcC,EAAAA,OAAa,CAC/BC,QAAS,gCACTC,OAAQ,CACNC,QAAS,mCACTC,SAAS,WAIAC,EAAc,mCAAG,WAAOC,GAAP,yFACLP,EAAYQ,IAAZ,gBAAyBD,EAAzB,aADK,uBACpBE,EADoB,EACpBA,KADoB,kBAErBA,EAAKC,MAFgB,2CAAH,sD,SCT3B,EAAwB,oBAAxB,EAAmD,mBAAnD,EAAkF,wB,SCgElF,EA1Da,WACX,OAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACQV,GAAYW,EAAAA,EAAAA,MAAZX,QAiBR,OAfAY,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,WAAMb,GAAN,uFAEjBU,GAAa,GAFI,SAGEX,EAAeC,GAHjB,OAGXG,EAHW,OAIjBG,EAAeH,GAJE,gDAMjBK,EAAS,KAAMM,SANE,yBAQjBJ,GAAa,GARI,4EAAH,sDAWlBG,EAAab,EACd,GAAE,CAACA,KAGF,4BACiB,IAAdS,IAAsB,uCACjB,OAALF,QAAK,IAALA,OAAA,EAAAA,EAAOQ,QAAS,IAAK,wDACrBC,MAAMC,QAAQZ,IACbA,EAAYa,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UACzC,OACE,4BACE,gBACEC,UAAWC,EACXC,IACEJ,EAAY,0CAC2BA,GACnCK,EAENC,IAAKP,KAEP,cAAGG,UAAWC,EAAd,SAAyBJ,KACzB,eAAGG,UAAWC,EAAd,wBAAyCF,OAXjCH,EAcb,MAGR,C","sources":["services/api-cast.js","webpack://goit-react-hw-05-movies/./src/pages/cast/Cast.module.css?3f37","pages/cast/Cast.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst postService = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: \"992077ad7a114ae4ce553bc055aefd4f\",\n    language:'en-US',\n  }   \n})\n\nexport const getPostCredits = async (movieId) => {\n  const { data } = await postService.get(`movie/${movieId}/credits`)\n  return data.cast\n}","// extracted by mini-css-extract-plugin\nexport default {\"Image\":\"Cast_Image__iwkaZ\",\"Name\":\"Cast_Name__6gnJ6\",\"Character\":\"Cast_Character__aSlfN\"};","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getPostCredits } from 'services/api-cast';\nimport garcia from '../../image/pexels.jpg';\nimport PropTypes from 'prop-types';\nimport css from './Cast.module.css';\n\nconst Cast = () => {\n  const [castCredits, setCastCredits] = useState([]);\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const filmsCredits = async movieId => {\n      try {\n        setIsLoading(true);\n        const cast = await getPostCredits(movieId);\n        setCastCredits(cast);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    filmsCredits(movieId);\n  }, [movieId]);\n\n  return (\n    <div>\n      {isLoading === true && <p>Loading...</p>}\n      {error?.length > 0 && <p>Oops,something went wrong...</p>}\n      {Array.isArray(castCredits) &&\n        castCredits.map(({ id, name, profile_path, character }) => {\n          return (\n            <div key={id}>\n              <img\n                className={css.Image}\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w200/${profile_path}`\n                    : garcia\n                }\n                alt={name}\n              />\n              <p className={css.Name}>{name}</p>\n              <p className={css.Character}>Character: {character}</p>\n            </div>\n          );\n        })}\n    </div>\n  );\n};\n\nCast.propTypes = {\n  castCredits: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      name: PropTypes.string,\n      profile_path: PropTypes.string,\n      character: PropTypes.string,\n    })\n  ),\n};\n\nexport default Cast;\n"],"names":["postService","axios","baseURL","params","api_key","language","getPostCredits","movieId","get","data","cast","useState","castCredits","setCastCredits","error","setError","isLoading","setIsLoading","useParams","useEffect","filmsCredits","message","length","Array","isArray","map","id","name","profile_path","character","className","css","src","garcia","alt"],"sourceRoot":""}