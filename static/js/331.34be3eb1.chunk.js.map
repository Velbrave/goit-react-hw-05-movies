{"version":3,"file":"static/js/331.34be3eb1.chunk.js","mappings":"8PAEMA,E,OAAcC,EAAAA,OAAa,CAC/BC,QAAS,gCACTC,OAAQ,CACNC,QAAS,mCACTC,SAAS,WAOAC,EAAc,mCAAG,WAAOC,GAAP,yFACLP,EAAYQ,IAAZ,gBAAyBD,IADpB,uBACpBE,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,sDCZ3B,EAAuB,2BAAvB,EAAgE,kCAAhE,EAA0G,4BAA1G,EAAkJ,gCAAlJ,EAA6L,+BAA7L,EAAqO,6BAArO,EAAyQ,2BAAzQ,EAA4S,4BAA5S,EAAiV,6BAAjV,EAA0X,gCAA1X,EAAma,6B,SCoHna,EA7GqB,WAAO,IAAD,QACzB,GAAwCC,EAAAA,EAAAA,UAAS,MAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACQT,GAAYU,EAAAA,EAAAA,MAAZV,QACFW,GAAWC,EAAAA,EAAAA,MAiBjB,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMT,EAAY,mCAAG,WAAMJ,GAAN,uFAEjBS,GAAa,GAFI,SAGEV,EAAeC,GAHjB,OAGXc,EAHW,OAIjBT,EAAgBS,GAJC,gDAMjBP,EAAS,KAAMQ,SANE,yBAQjBN,GAAa,GARI,4EAAH,sDAWlBL,EAAaJ,EACd,GAAE,CAACA,KAGF,4BACE,SAAC,KAAD,CAAMgB,GAAE,iBAAEL,QAAF,IAAEA,GAAF,UAAEA,EAAUM,aAAZ,aAAE,EAAiBC,YAAnB,QAA2B,IAAnC,UACE,mBAAQC,UAAWC,EAAYC,KAAK,SAApC,wBAIa,IAAdb,IAAsB,uCACjB,OAALF,QAAK,IAALA,OAAA,EAAAA,EAAOgB,QAAS,IAAK,wDACJ,OAAjBlB,IACC,iBAAKe,UAAWC,EAAhB,WACE,0BACE,gBACED,UAAWC,EACXG,IACEnB,EAAaoB,cAAb,yCACsCpB,EAAaoB,eAC/CC,EAENC,IAAKtB,EAAauB,UAGtB,iBAAKR,UAAWC,EAAhB,WACE,wBAAKhB,EAAawB,SAClB,wCACeC,KAAKC,MAAL,UAA0C,GAA5B1B,EAAa2B,eAD1C,QAGA,eAAGZ,UAAWC,EAAd,WACE,cAAGD,UAAWC,EAAd,sBADF,IACyChB,EAAa4B,aAEtD,cAAGb,UAAWC,EAAd,UACE,qCAEF,gBAAKD,UAAWC,EAAhB,SACGhB,EAAa6B,OAAOC,KAAI,SAAAC,GACvB,OAAO,uBAAmBA,EAAMR,MAAjBQ,EAAMC,GACtB,aAKT,iBAAKjB,UAAWC,EAAhB,WACE,cAAGD,UAAWC,EAAd,qCACA,2BACE,yBACE,SAAC,KAAD,CACEJ,GAAG,OACHC,MAAO,CAAEC,KAAI,OAAEP,QAAF,IAAEA,GAAF,UAAEA,EAAUM,aAAZ,aAAE,EAAiBC,MAChCC,UAAWC,EAHb,qBAQF,yBACE,SAAC,KAAD,CACEJ,GAAG,UACHC,MAAO,CAAEC,KAAI,OAAEP,QAAF,IAAEA,GAAF,UAAEA,EAAUM,aAAZ,aAAE,EAAiBC,MAChCC,UAAWC,EAHb,8BAUN,SAAC,EAAAiB,SAAD,CAAUC,UAAU,sCAApB,UACE,SAAC,KAAD,QAIP,C","sources":["services/api-moviesDetails.js","webpack://goit-react-hw-05-movies/./src/pages/movieDetails/MovieDetails.module.css?3b61","pages/movieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst postService = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: \"992077ad7a114ae4ce553bc055aefd4f\",\n    language:'en-US',\n   \n    \n  \n  }   \n})\n\nexport const getPostDetails = async (movieId) => {\n  const { data } = await postService.get(`movie/${movieId}`)\n  return data\n}","// extracted by mini-css-extract-plugin\nexport default {\"Link\":\"MovieDetails_Link__MYxP-\",\"FilmDetails\":\"MovieDetails_FilmDetails__tmWjY\",\"Image\":\"MovieDetails_Image__dPhZ2\",\"Container\":\"MovieDetails_Container__gI8PW\",\"Overview\":\"MovieDetails_Overview__V2XpI\",\"Genres\":\"MovieDetails_Genres__ykz93\",\"Name\":\"MovieDetails_Name__NvUDV\",\"Title\":\"MovieDetails_Title__AGr2k\",\"Inform\":\"MovieDetails_Inform__oUN86\",\"AddInform\":\"MovieDetails_AddInform__+lqOF\",\"Button\":\"MovieDetails_Button__Dmg6m\"};","import { Suspense } from 'react';\nimport { useEffect, useState } from 'react';\nimport pexels from '../../image/pexels.jpg';\nimport PropTypes from 'prop-types';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport { getPostDetails } from 'services/api-moviesDetails';\nimport css from '../movieDetails/MovieDetails.module.css';\n\nconst MovieDetails = () => {\n  const [filmsDetails, setFilmsDetails] = useState(null);\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n  const location = useLocation();\n\n  useEffect(() => {\n    const filmsDetails = async movieId => {\n      try {\n        setIsLoading(true);\n        const film = await getPostDetails(movieId);\n        setFilmsDetails(film);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    filmsDetails(movieId);\n  }, [movieId]);\n\n  return (\n    <div>\n      <Link to={location?.state?.from ?? '/'}>\n        <button className={css.Button} type=\"button\">\n          Go back\n        </button>\n      </Link>\n      {isLoading === true && <p>Loading...</p>}\n      {error?.length > 0 && <p>Oops,something went wrong...</p>}\n      {filmsDetails !== null && (\n        <div className={css.FilmDetails}>\n          <div>\n            <img\n              className={css.Image}\n              src={\n                filmsDetails.backdrop_path\n                  ? `https://image.tmdb.org/t/p/w500${filmsDetails.backdrop_path}`\n                  : pexels\n              }\n              alt={filmsDetails.name}\n            />\n          </div>\n          <div className={css.Container}>\n            <h2>{filmsDetails.title}</h2>\n            <p>\n              User score: {Math.round(`${filmsDetails.vote_average * 10}`)}%\n            </p>\n            <p className={css.Overview}>\n              <b className={css.Title}>Overview</b> {filmsDetails.overview}\n            </p>\n            <p className={css.Genres}>\n              <b>Genres</b>\n            </p>\n            <div className={css.Name}>\n              {filmsDetails.genres.map(detal => {\n                return <p key={detal.id}>{detal.name}</p>;\n              })}\n            </div>\n          </div>\n        </div>\n      )}\n      <div className={css.Inform}>\n        <p className={css.AddInform}>Additional information</p>\n        <ul>\n          <li>\n            <Link\n              to=\"cast\"\n              state={{ from: location?.state?.from }}\n              className={css.Link}\n            >\n              Cast\n            </Link>\n          </li>\n          <li>\n            <Link\n              to=\"reviews\"\n              state={{ from: location?.state?.from }}\n              className={css.Link}\n            >\n              Reviews\n            </Link>\n          </li>\n        </ul>\n      </div>\n      <Suspense fallback={<p>Loading...</p>}>\n        <Outlet />\n      </Suspense>\n    </div>\n  );\n};\n\nMovieDetails.propTypes = {\n  filmsDetails: PropTypes.shape({\n    backdrop_path: PropTypes.string,\n    name: PropTypes.string,\n    title: PropTypes.string,\n    popularity: PropTypes.number,\n    overview: PropTypes.string,\n    genres: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number,\n        name: PropTypes.string,\n      })\n    ),\n  }),\n};\n\nexport default MovieDetails;\n"],"names":["postService","axios","baseURL","params","api_key","language","getPostDetails","movieId","get","data","useState","filmsDetails","setFilmsDetails","error","setError","isLoading","setIsLoading","useParams","location","useLocation","useEffect","film","message","to","state","from","className","css","type","length","src","backdrop_path","pexels","alt","name","title","Math","round","vote_average","overview","genres","map","detal","id","Suspense","fallback"],"sourceRoot":""}