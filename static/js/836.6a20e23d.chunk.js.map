{"version":3,"file":"static/js/836.6a20e23d.chunk.js","mappings":"iPAEMA,E,OAAcC,EAAAA,OAAa,CAC/BC,QAAS,gCACTC,OAAQ,CACNC,QAAS,mCACTC,SAAU,QACVC,KAAM,KAOGC,EAAc,mCAAG,WAAOC,GAAP,yFACLR,EAAYS,IAAZ,gBAAyBD,EAAzB,aADK,uBACpBE,EADoB,EACpBA,KADoB,kBAErBA,EAAKC,SAFgB,2CAAH,sDCb3B,EAA0B,yBAA1B,EAA2D,uB,SCwD3D,EAnDgB,WACd,OAAwCC,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACQV,GAAYW,EAAAA,EAAAA,MAAZX,QAiBR,OAfAY,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,WAAMb,GAAN,uFAEjBU,GAAa,GAFI,SAGEX,EAAeC,GAHjB,OAGXc,EAHW,OAIjBR,EAAgBQ,GAJC,gDAMjBN,EAAS,KAAMO,SANE,yBAQjBL,GAAa,GARI,4EAAH,sDAWlBG,EAAab,EACd,GAAE,CAACA,KAGF,4BACiB,IAAdS,IAAsB,uCACjB,OAALF,QAAK,IAALA,OAAA,EAAAA,EAAOS,QAAS,IAAK,wDACG,IAAxBX,EAAaW,OACZX,EAAaY,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC9B,OACE,iBAAKC,UAAWC,EAAhB,WACE,eAAGD,UAAWC,EAAd,qBAAkCH,MAClC,uBAAIC,MAF4BF,EAKrC,KAED,qEAIP,C","sources":["services/api-reviews.js","webpack://goit-react-hw-05-movies/./src/pages/reviews/Reviews.module.css?ccfa","pages/reviews/Reviews.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst postService = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: \"992077ad7a114ae4ce553bc055aefd4f\",\n    language: 'en-US',\n    page: 1,\n   \n    \n  \n  }   \n})\n\nexport const getPostReviews = async (movieId) => {\n  const { data } = await postService.get(`movie/${movieId}/reviews`)\n  return data.results\n}","// extracted by mini-css-extract-plugin\nexport default {\"Reviews\":\"Reviews_Reviews__rUjUm\",\"Autor\":\"Reviews_Autor__hkToo\"};","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getPostReviews } from 'services/api-reviews';\nimport PropTypes from 'prop-types';\nimport css from './Reviews.module.css';\n\nconst Reviews = () => {\n  const [reviewsFilms, setReviewsFilms] = useState([]);\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const filmsReviews = async movieId => {\n      try {\n        setIsLoading(true);\n        const cast = await getPostReviews(movieId);\n        setReviewsFilms(cast);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    filmsReviews(movieId);\n  }, [movieId]);\n\n  return (\n    <div>\n      {isLoading === true && <p>Loading...</p>}\n      {error?.length > 0 && <p>Oops,something went wrong...</p>}\n      {reviewsFilms.length !== 0 ? (\n        reviewsFilms.map(({ id, author, content }) => {\n          return (\n            <div className={css.Reviews} key={id}>\n              <p className={css.Autor}>Author: {author}</p>\n              <p>{content}</p>\n            </div>\n          );\n        })\n      ) : (\n        <p>We dont have any reviews for this movie</p>\n      )}\n    </div>\n  );\n};\n\nReviews.propTypes = {\n  reviewsFilms: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      author: PropTypes.string,\n      content: PropTypes.string,\n    })\n  ),\n};\n\nexport default Reviews;\n"],"names":["postService","axios","baseURL","params","api_key","language","page","getPostReviews","movieId","get","data","results","useState","reviewsFilms","setReviewsFilms","error","setError","isLoading","setIsLoading","useParams","useEffect","filmsReviews","cast","message","length","map","id","author","content","className","css"],"sourceRoot":""}